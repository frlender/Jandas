import { ns_arr, numx, nsx, locParamArr } from './cmm';
import { Obj, GroupByThen } from './df_lib';
import Index from './Index';
import Series from './Series';
declare class DataFrame<T> {
    values: T[][];
    shape: [number, number];
    _index: Index;
    _columns: Index;
    _tr?: T[][];
    constructor(arr: T[][]);
    constructor(arr: T[][], index: Index | ns_arr);
    constructor(arr: T[][], index: null | Index | ns_arr, columns: Index | ns_arr);
    constructor(arr: Obj<T>[]);
    constructor(arr: Obj<T>[], index: Index | ns_arr);
    __transpose(arr: T[][]): T[][];
    _transpose(arr: T[][]): T[][];
    get tr(): T[][];
    set tr(vals: T[][]);
    get index(): Index;
    get columns(): Index;
    set index(vals: ns_arr | Index);
    set columns(vals: ns_arr | Index);
    _p(): void;
    p(): void;
    transpose(inplace?: boolean): DataFrame<T>;
    _iloc_asymmetric(v1: T[][], l1: Index, l2: Index, transpose: boolean, i1: numx | boolean[], i2?: numx | boolean[]): DataFrame<T> | Series<T> | null;
    _iloc_symmetric(ir?: numx | boolean[], ic?: numx | boolean[]): DataFrame<T> | T | null;
    iloc(row: number, col: number): T;
    iloc(row: number, col?: null | string | number[] | boolean[]): Series<T>;
    iloc(row: null | string | number[] | boolean[], col: number): Series<T>;
    iloc(row?: null | string | number[] | boolean[], col?: null | string | number[] | boolean[]): DataFrame<T>;
    loc(row: number | string, col: number | string): T | Series<T> | DataFrame<T>;
    loc(row: number | string, col?: null | locParamArr): Series<T> | DataFrame<T>;
    loc(row: null | locParamArr, col: number | string): Series<T> | DataFrame<T>;
    loc(row?: null | locParamArr, col?: null | locParamArr): DataFrame<T>;
    _iset_asymmetric(v1: T[][], l1: Index, l2: Index, i1: numx | boolean[], rpl: T[] | T[][], i2?: numx | boolean[]): null | undefined;
    _iset_symmetric(ir: undefined | numx | boolean[], ic: undefined | numx | boolean[], rpl: T | T[] | T[][]): null | undefined;
    _iset(row: undefined | numx | boolean[], col: undefined | numx | boolean[], rpl: T | T[] | T[][]): void;
    iset(row: number, col: number, rpl: T): void;
    iset(row: number, rpl: T[]): void;
    iset(row: number, col: null | string | number[] | boolean[], rpl: T[]): void;
    iset(row: null | string | number[] | boolean[], col: number, rpl: T[]): void;
    iset(rpl: T[][]): void;
    iset(row: null | string | number[] | boolean[], rpl: T[][]): void;
    iset(row: null | string | number[] | boolean[], col: null | string | number[] | boolean[], rpl: T[][]): void;
    set(row: number | string, col: number | string, rpl: T | T[] | T[][]): void;
    set(row: number | string, rpl: T[] | T[][]): void;
    set(row: number | string, col: null | locParamArr, rpl: T[] | T[][]): void;
    set(row: null | locParamArr, col: number | string, rpl: T[] | T[][]): void;
    set(rpl: T[][]): void;
    set(row: null | locParamArr, rpl: T[][]): void;
    set(row: null | locParamArr, col: null | locParamArr, rpl: T[][]): void;
    push(val: T[], name?: number | string, axis?: 0 | 1): void;
    _insert(i1: number, l1: Index, v1: T[][], rpl: T[], name: number | string): void;
    insert(idx: number, val: T[], name?: number | string, axis?: 0 | 1): void;
    drop(labels: nsx, axis?: 0 | 1): DataFrame<T>;
    reset_index(name?: string | number): DataFrame<T>;
    reset_columns(name?: string | number): DataFrame<T>;
    to_dict(axis?: 0 | 1): Obj<T>[];
    b(expr: string, axis?: 0 | 1): boolean[];
    q(col_expr: string): DataFrame<T>;
    q(row_expr: null | string, col_expr: null | string): DataFrame<T>;
    iterrows(func: (row: Series<T>, key: number | string | ns_arr, i: number) => void): void;
    itercols(func: (col: Series<T>, key: number | string | ns_arr, i: number) => void): void;
    groupby(): GroupByThen<T>;
    groupby(labels: nsx | null): GroupByThen<T>;
    groupby(labels: nsx | null, axis: 0 | 1): GroupByThen<T>;
    _groupby(labels: nsx | null, axis?: 0 | 1): GroupByThen<T>;
    _sort_values(labels: nsx | null, ascending?: boolean, axis?: 0 | 1): DataFrame<T>;
    sort_values(labels: nsx | null, ascending?: boolean, axis?: 0 | 1): DataFrame<T>;
    op(opStr: string): DataFrame<T>;
    op(opStr: string, df: DataFrame<T> | T[][]): DataFrame<T>;
    _reduce_num(func: (a: number[]) => number | undefined, axis: 0 | 1): Series<number>;
    min(axis?: 0 | 1): Series<number>;
    max(axis?: 0 | 1): Series<number>;
    sum(axis?: 0 | 1): Series<number>;
    mean(axis?: 0 | 1): Series<number>;
    median(axis?: 0 | 1): Series<number>;
    std(axis?: 0 | 1): Series<number>;
    var(axis?: 0 | 1): Series<number>;
    mode(axis?: 0 | 1): Series<number>;
}
export default DataFrame;
